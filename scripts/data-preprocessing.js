const FlexSearch = require("flexsearch");
const axios = require("axios");
const path = require("path");
const fs = require("fs");
const zlib = require("zlib");
const { map, uniq } = require("lodash");
require("dotenv").config();

const projectPath = path.join(__dirname, "..");
const configPath = path.join(projectPath, "flexsearch.json");

const generatedDir = "__generated__";
if (!fs.existsSync(generatedDir)) {
  fs.mkdirSync(generatedDir);
}

const fieldContactIndexPath = path.join(
  projectPath,
  generatedDir,
  "field-contact-index.ts"
);
const uniqValueIndexPath = path.join(
  projectPath,
  generatedDir,
  "unique-values.json"
);

const config = JSON.parse(fs.readFileSync(configPath));

// Download field contact data and generate derived data from it
axios.get(process.env.NEXT_PUBLIC_FIO_DATA_URL).then(({ data }) => {
  // Build and save a flexsearch index
  const index = FlexSearch.create(config);
  index.add(Object.values(data));
  const indexStr = index.export();
  const deflatedIndex = zlib.deflateSync(indexStr).toString("base64");
  const indexFile = `
/** This file was generated by ${__filename} */
import {inflateSync} from "zlib";

const index = "${deflatedIndex}";
export default () => inflateSync(Buffer.from(index, "base64")).toString()
`;
  fs.writeFileSync(fieldContactIndexPath, indexFile);

  // Get unique value lists for key fields
  const uniqueFields = ["contactOfficerName", "zip"].reduce(
    (col, field) => ({
      ...col,
      [field]: uniq(map(data, field)),
    }),
    {}
  );
  fs.writeFileSync(uniqValueIndexPath, JSON.stringify(uniqueFields));
});
